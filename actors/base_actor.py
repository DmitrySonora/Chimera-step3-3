from abc import ABC, abstractmethod
from typing import Dict, Any, Optional
import logging
import asyncio
from datetime import datetime

logger = logging.getLogger(__name__)


class BaseActor(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–æ—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, name: str, config: Dict[str, Any]):
        self.name = name
        self.config = config
        self.logger = logging.getLogger(f"actor.{name}")
        self.is_initialized = False
        self.is_running = False
        self._start_time: Optional[datetime] = None
        self._message_count = 0
        self._error_count = 0
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        from config.actors import ACTOR_CONFIG
        self.actor_config = ACTOR_CONFIG
        
        self.logger.info(f"üê≤ –°–æ–∑–¥–∞–Ω –∞–∫—Ç–æ—Ä: {self.name}")
    
    @abstractmethod
    async def handle_message(self, message: Dict[str, Any]) -> Any:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –°–ª–æ–≤–∞—Ä—å —Å —Ç–∏–ø–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–º–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        pass
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–æ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        if self.is_initialized:
            self.logger.warning(f"üê≤ –ê–∫—Ç–æ—Ä {self.name} —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        self._start_time = datetime.utcnow()
        self.is_initialized = True
        self.is_running = True
        self.logger.info(f"üê≤ –ê–∫—Ç–æ—Ä {self.name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞–∫—Ç–æ—Ä–∞"""
        if not self.is_running:
            return
        
        self.logger.info(f"üê≤ –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∞–∫—Ç–æ—Ä–∞ {self.name}")
        
        # Graceful shutdown —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        timeout = self.actor_config.get("graceful_shutdown_timeout", 30)
        try:
            await asyncio.wait_for(self._graceful_shutdown(), timeout=timeout)
        except asyncio.TimeoutError:
            self.logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–∫—Ç–æ—Ä–∞ {self.name}")
        
        self.is_running = False
        self.is_initialized = False
        self.logger.info(f"üê≤ –ê–∫—Ç–æ—Ä {self.name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _graceful_shutdown(self):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –ª–æ–≥–∏–∫–∏"""
        pass
    
    async def health_check(self) -> Dict[str, Any]:
        """Health check –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        uptime = None
        if self._start_time:
            uptime = (datetime.utcnow() - self._start_time).total_seconds()
        
        return {
            "actor": self.name,
            "status": "healthy" if self.is_running else "stopped",
            "initialized": self.is_initialized,
            "uptime_seconds": uptime,
            "message_count": self._message_count,
            "error_count": self._error_count,
            "timestamp": datetime.utcnow().isoformat()
        }
    
    def increment_message_count(self):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self._message_count += 1
    
    def increment_error_count(self):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        self._error_count += 1