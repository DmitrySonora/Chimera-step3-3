import logging
import asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ChatAction
from config.settings import TELEGRAM_BOT_TOKEN, TYPING_DELAY, USER_MESSAGES, USE_JSON_MODE, DEFAULT_MODE
from services.deepseek_service import deepseek_service
from events.event_store import EventStore
from actors.memory_actor import MemoryActor
from actors.user_session_actor import UserSessionActor
from actors.message_types import create_memory_message
from database.connection import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class ChimeraTelegramBot:
    """Telegram –±–æ—Ç –•–∏–º–µ—Ä—ã —Å Event-driven –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self):
        self.application = None
        self.is_running = False
        self.memory_actor = None
        self.event_store = None
        self.user_session_actor = None
        self.is_typing = False
    
    async def send_typing_action(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏"""
        while self.is_typing:
            await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
            await asyncio.sleep(TYPING_DELAY)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ UserSessionActor
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = update.message.from_user.id
            username = update.message.from_user.username or "unknown"
            message_text = update.message.text
            chat_id = update.effective_chat.id
            
            logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} (ID: {user_id}): {message_text[:50]}...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            self.is_typing = True
            typing_task = asyncio.create_task(
                self.send_typing_action(context, chat_id)
            )
            
            try:
                # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ UserSessionActor (event-driven –ø–æ—Ç–æ–∫)
                response = await self.user_session_actor.handle_user_message(
                    user_message=message_text,
                    user_id=user_id
                )
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
                self.is_typing = False
                await typing_task
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                await update.message.reply_text(response)
                
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            except Exception as e:
                self.is_typing = False
                logger.error(f"Error in message processing: {e}")
                await update.message.reply_text(USER_MESSAGES["error_processing"])
                
        except Exception as e:
            logger.error(f"Critical error in handle_message: {e}")
            if update and update.message:
                await update.message.reply_text(USER_MESSAGES["critical_error"])
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.message.from_user.id
        username = update.message.from_user.username or "unknown"
        
        logger.info(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {username} (ID: {user_id})")
        
        # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å—Ç–∞—Ä—Ç–∞ —á–µ—Ä–µ–∑ UserSessionActor
        # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await update.message.reply_text(USER_MESSAGES["welcome"])
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("üê≤ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –•–∏–º–µ—Ä—ã...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.initialize()
        
        # –°–æ–∑–¥–∞–µ–º Event Store
        self.event_store = EventStore(db)
        await self.event_store.initialize()
        logger.info("üóÑÔ∏è Event Store –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MemoryActor
        self.memory_actor = MemoryActor(db)
        await self.memory_actor.initialize()
        logger.info("üß† MemoryActor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º UserSessionActor - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
        self.user_session_actor = UserSessionActor(
            memory_actor=self.memory_actor,
            event_store=self.event_store
        )
        await self.user_session_actor.initialize()
        logger.info("üé≠ UserSessionActor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        )
        
        self.is_running = True
        logger.info("üê≤ –•–∏–º–µ—Ä–∞ –ø—Ä–æ—Å–Ω—É–ª–∞—Å—å –∏ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—â–µ–Ω–∏—é!")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.initialize()
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        logger.info("üê≤ –•–∏–º–µ—Ä–∞ —Å–ª—É—à–∞–µ—Ç...")
    
    async def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("üê≤ –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –•–∏–º–µ—Ä—ã...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UserSessionActor
        if self.user_session_actor:
            await self.user_session_actor.shutdown()
            logger.info("üé≠ UserSessionActor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MemoryActor
        if self.memory_actor:
            await self.memory_actor.shutdown()
            logger.info("üß† MemoryActor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Event Store
        if self.event_store:
            await self.event_store.shutdown()
            logger.info("üóÑÔ∏è Event Store –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        await db.close()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if self.application:
            await self.application.stop()
            
        self.is_running = False
        logger.info("üê≤ –•–∏–º–µ—Ä–∞ –∑–∞—Å–Ω—É–ª–∞. –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
telegram_bot = ChimeraTelegramBot()