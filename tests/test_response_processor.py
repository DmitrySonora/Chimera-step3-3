import pytest
import asyncio
from services.response_processor import ResponseProcessor


@pytest.mark.asyncio
async def test_clean_bot_response():
    """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
    processor = ResponseProcessor()
    
    # –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    text = "***–ü—Ä–∏–≤–µ—Ç!*** ___–ö–∞–∫ –¥–µ–ª–∞?___\n\n\n\n–•–æ—Ä–æ—à–æ!"
    cleaned = processor.clean_bot_response(text)
    assert cleaned == "**–ü—Ä–∏–≤–µ—Ç!** __–ö–∞–∫ –¥–µ–ª–∞?__\n\n–•–æ—Ä–æ—à–æ!"


@pytest.mark.asyncio
async def test_detect_format_violations():
    """–¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç–∞"""
    processor = ResponseProcessor()
    
    # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
    violations1 = processor.detect_format_violations("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–∑–≤–∏–Ω–∏—Ç–µ, –∏–∑–≤–∏–Ω–∏—Ç–µ!")
    assert "excessive_apology" in violations1
    
    violations2 = processor.detect_format_violations("–Ø —è–≤–ª—è—é—Å—å –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")
    assert "ai_disclosure" in violations2
    
    violations3 = processor.detect_format_violations("üòÄüòÄüòÄüòÄüòÄüòÄ")
    assert "excessive_emoji" in violations3


@pytest.mark.asyncio
async def test_process_json_response():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –æ—Ç–≤–µ—Ç–∞"""
    processor = ResponseProcessor()
    
    json_response = '{"response": "–ü—Ä–∏–≤–µ—Ç, —è –•–∏–º–µ—Ä–∞!"}'
    result = await processor.process_response(json_response, use_json=True)
    assert result == "–ü—Ä–∏–≤–µ—Ç, —è –•–∏–º–µ—Ä–∞!"
    
    # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º JSON
    invalid_json = "–≠—Ç–æ –Ω–µ JSON –æ—Ç–≤–µ—Ç"
    result2 = await processor.process_response(invalid_json, use_json=True)
    assert result2 == invalid_json  # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å