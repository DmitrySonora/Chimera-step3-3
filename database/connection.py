import asyncio
import logging
from typing import Optional, Any, Dict, List
import asyncpg
from asyncpg import Pool, Connection
from contextlib import asynccontextmanager

from config.database import (
    DATABASE_URL,
    POOL_MIN_SIZE,
    POOL_MAX_SIZE,
    POOL_MAX_INACTIVE_CONNECTION_LIFETIME,
    QUERY_TIMEOUT,
    STATEMENT_TIMEOUT
)

logger = logging.getLogger(__name__)


class DatabaseConnection:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ PostgreSQL —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π connection pooling"""
    
    def __init__(self):
        self.pool: Optional[Pool] = None
        self._initialized = False
    
    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è connection pool"""
        if self._initialized:
            logger.warning("‚ùóÔ∏è–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º connection pool
            self.pool = await asyncpg.create_pool(
                DATABASE_URL,
                min_size=POOL_MIN_SIZE,
                max_size=POOL_MAX_SIZE,
                max_inactive_connection_lifetime=POOL_MAX_INACTIVE_CONNECTION_LIFETIME,
                command_timeout=QUERY_TIMEOUT,
                statement_cache_size=0,  # –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            async with self.pool.acquire() as conn:
                version = await conn.fetchval("SELECT version()")
                logger.info(f"üê≤ –°–æ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL: {version}")
            
            self._initialized = True
            logger.info("üê≤ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {e}")
            raise
    
    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ connection pool"""
        if self.pool:
            await self.pool.close()
            self._initialized = False
            logger.info("üê≤ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î –∑–∞–∫—Ä—ã—Ç")
    
    @asynccontextmanager
    async def acquire(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ pool"""
        if not self.pool:
            raise RuntimeError("Database connection not initialized")
        
        async with self.pool.acquire() as connection:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timeout –¥–ª—è statements
            await connection.execute(
                f"SET statement_timeout = {STATEMENT_TIMEOUT * 1000}"
            )
            yield connection
    
    async def execute(self, query: str, *args) -> str:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        async with self.acquire() as conn:
            return await conn.execute(query, *args)
    
    async def fetch(self, query: str, *args) -> List[asyncpg.Record]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫"""
        async with self.acquire() as conn:
            return await conn.fetch(query, *args)
    
    async def fetchrow(self, query: str, *args) -> Optional[asyncpg.Record]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        async with self.acquire() as conn:
            return await conn.fetchrow(query, *args)
    
    async def fetchval(self, query: str, *args) -> Any:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
        async with self.acquire() as conn:
            return await conn.fetchval(query, *args)
    
    async def execute_many(self, query: str, args_list: List[tuple]) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (batch)"""
        async with self.acquire() as conn:
            await conn.executemany(query, args_list)
    
    async def transaction(self, isolation_level: str = "read_committed"):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        async with self.acquire() as conn:
            async with conn.transaction(isolation=isolation_level):
                yield conn


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
db = DatabaseConnection()