import re
import logging
from typing import Dict, Any, List, Optional, Callable
from utils.json_utils import safe_json_parse, validate_json_response

logger = logging.getLogger(__name__)


class ResponseProcessor:
    """–ú–æ–¥—É–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ - –≥–æ—Ç–æ–≤ –∫ pipeline –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"""
    
    def __init__(self):
        self.processors: List[Callable] = []  # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ pipeline (—ç—Ç–∞–ø 8)
        self.format_violations = []  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
    
    async def process_response(self, response: str, mode: str = "auto", use_json: bool = False) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
        
        Args:
            response: –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            mode: –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è –±—É–¥—É—â–∏—Ö —ç—Ç–∞–ø–æ–≤)
            use_json: –û–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ JSON —Ñ–æ—Ä–º–∞—Ç
            
        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        """
        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º JSON, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        if use_json:
            json_data = safe_json_parse(response)
            if validate_json_response(json_data):
                response = json_data["response"]
            else:
                logger.warning("Invalid JSON response format, using raw text")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        cleaned = self.clean_bot_response(response)
        
        # –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
        violations = self.detect_format_violations(cleaned)
        if violations:
            self.format_violations.extend(violations)
            logger.info(f"Format violations detected: {violations}")
        
        # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ pipeline –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º (—ç—Ç–∞–ø 8)
        result = cleaned
        for processor in self.processors:
            result = await processor(result, mode)
        
        return result
    
    def clean_bot_response(self, text: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            text: –°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        # –£–¥–∞–ª—è–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ markdown —Å–∏–º–≤–æ–ª—ã
        patterns_to_clean = [
            (r'\*{3,}', '**'),  # –¢—Ä–æ–π–Ω—ã–µ –∏ –±–æ–ª–µ–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ -> –¥–≤–æ–π–Ω—ã–µ
            (r'_{3,}', '__'),   # –¢—Ä–æ–π–Ω—ã–µ –∏ –±–æ–ª–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è -> –¥–≤–æ–π–Ω—ã–µ
            (r'\n{3,}', '\n\n'), # –¢—Ä–æ–π–Ω—ã–µ –∏ –±–æ–ª–µ–µ –ø–µ—Ä–µ–Ω–æ—Å—ã -> –¥–≤–æ–π–Ω—ã–µ
            (r'^#+\s*', ''),    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
            (r'\[([^\]]+)\]\([^\)]+\)', r'\1'),  # Markdown —Å—Å—ã–ª–∫–∏ -> —Ç–µ–∫—Å—Ç
        ]
        
        cleaned = text
        for pattern, replacement in patterns_to_clean:
            cleaned = re.sub(pattern, replacement, cleaned, flags=re.MULTILINE)
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        cleaned = cleaned.strip()
        
        return cleaned
    
    def detect_format_violations(self, text: str) -> List[str]:
        """
        –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –•–∏–º–µ—Ä—ã
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
        """
        violations = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏–π
        violation_patterns = {
            "excessive_apology": r'(–∏–∑–≤–∏–Ω–∏—Ç–µ|–ø—Ä–æ—Å—Ç–∏—Ç–µ|–∏–∑–≤–∏–Ω—è—é—Å—å|–ø—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è|sorry|apolog(?:y|ies|ize))',
            "ai_disclosure": r'(—è\s+(?:—è–≤–ª—è—é—Å—å|–µ—Å—Ç—å)\s+(?:–∏–∏|ai|–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω))',
            "excessive_emoji": r'([üòÄ-üôèüåÄ-üóø]{3,})',
            "code_blocks": r'```[\s\S]*?```',
            "numbered_lists": r'^\d+\.\s+',
            "bullet_points": r'^[\*\-‚Ä¢]\s+',
        }
        
        for violation_type, pattern in violation_patterns.items():
            matches = re.findall(pattern, text, re.IGNORECASE | re.MULTILINE)
            if violation_type == "excessive_apology":
                if len(matches) > 1:
                    violations.append(violation_type)
            else:
                if matches:
                    violations.append(violation_type)
        
        return violations
    
    async def fallback_to_normal(self, original_response: str) -> str:
        """
        Fallback –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö JSON –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            original_response: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            
        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
        """
        logger.info("Falling back to normal response processing")
        return await self.process_response(original_response, use_json=False)
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è –±—É–¥—É—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)"""
        violation_counts = {}
        for violation in self.format_violations:
            violation_counts[violation] = violation_counts.get(violation, 0) + 1
        
        return {
            "total_violations": len(self.format_violations),
            "violation_types": violation_counts
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
response_processor = ResponseProcessor()