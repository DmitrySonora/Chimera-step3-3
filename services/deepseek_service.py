import aiohttp
import asyncio
import logging
from typing import Optional, Dict, Any
from config.settings import DEEPSEEK_API_KEY, DEEPSEEK_API_URL, API_TIMEOUT, USER_MESSAGES
from config.prompts import get_system_prompt
from config.api_params import get_api_params
from services.response_processor import response_processor


logger = logging.getLogger(__name__)


class DeepSeekService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek API"""
    
    def __init__(self):
        self.headers = {
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
            "Content-Type": "application/json"
        }
    
    async def ask_deepseek(
            self, 
            message: str, 
            user_id: Optional[int] = None,
            use_json: bool = False,
            mode: str = "default"
        ) -> str:
            """
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API
            
            Args:
                message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
                use_json: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JSON —Ä–µ–∂–∏–º
                mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            
            Returns:
                –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            """
            try:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
                logger.info(f"üêç DeepSeek request - mode: {mode}, üêç JSON: {use_json}, user: {user_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞
                params = get_api_params(mode)
                system_prompt = get_system_prompt(mode, use_json)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
                request_data = {
                    **params,
                    "messages": [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": message}
                    ]
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º JSON —Ä–µ–∂–∏–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if use_json:
                    request_data["response_format"] = {"type": "json_object"}
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å retry –ª–æ–≥–∏–∫–æ–π
                for attempt in range(3):
                    try:
                        async with aiohttp.ClientSession() as session:
                            async with session.post(
                                DEEPSEEK_API_URL,
                                headers=self.headers,
                                json=request_data,
                                timeout=aiohttp.ClientTimeout(total=API_TIMEOUT)
                            ) as response:
                                if response.status == 200:
                                    data = await response.json()
                                    raw_response = data["choices"][0]["message"]["content"]
                                    
                                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
                                    processed_response = await response_processor.process_response(
                                        raw_response, 
                                        mode=mode, 
                                        use_json=use_json
                                    )
                                    
                                    return processed_response
                                else:
                                    error_text = await response.text()
                                    logger.error(f"DeepSeek API error: {response.status} - {error_text}")
                                    
                                    # –ü—Ä–∏ –æ—à–∏–±–∫–µ JSON —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π
                                    if use_json and attempt == 0:
                                        logger.info("JSON mode failed, falling back to normal mode")
                                        use_json = False
                                        request_data.pop("response_format", None)
                                        system_prompt = get_system_prompt(mode, use_json=False)
                                        request_data["messages"][0]["content"] = system_prompt
                                        continue
                                    
                    except asyncio.TimeoutError:
                        logger.warning(f"Timeout on attempt {attempt + 1}")
                        if attempt < 2:
                            await asyncio.sleep(2 ** attempt)
                        continue
                        
                    except Exception as e:
                        logger.error(f"Request error on attempt {attempt + 1}: {e}")
                        if attempt < 2:
                            await asyncio.sleep(2 ** attempt)
                        continue
                
                # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
                from config.settings import USER_MESSAGES
                return USER_MESSAGES["service_unavailable"]
                
            except Exception as e:
                logger.error(f"DeepSeek service error: {e}")
                from config.settings import USER_MESSAGES
                return USER_MESSAGES["critical_error"]


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
deepseek_service = DeepSeekService()