#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ç–∞–ø–∞ 3.3 - Event Sourcing + –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∞–∫—Ç–æ—Ä–æ–≤
"""
import asyncio
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ path
sys.path.append(str(Path(__file__).parent.parent))

from database.connection import db
from events.event_store import EventStore
from events.conversation_events import UserMessageEvent, BotResponseEvent
from actors.memory_actor import MemoryActor
from actors.user_session_actor import UserSessionActor
from config.events import EVENT_CONFIG
from config.coordination import COORDINATION_CONFIG

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_event_sourcing():
    """–¢–µ—Å—Ç Event Sourcing —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    logger.info("\n=== –¢–µ—Å—Ç Event Sourcing ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await db.initialize()
    event_store = EventStore(db)
    await event_store.initialize()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è
        user_event = UserMessageEvent(
            user_id=77777,
            text="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Event Sourcing",
            emotion="curious"
        )
        
        bot_event = BotResponseEvent(
            user_id=77777,
            response_text="–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã",
            generation_time_ms=150,
            mode_used="default"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        logger.info("üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è...")
        await event_store.save_event(user_event)
        await event_store.save_event(bot_event)
        
        # –§–æ—Ä—Å–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
        await event_store._flush_buffer()
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        logger.info("üìñ –ß–∏—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –ë–î...")
        events = await event_store.get_user_events(77777)
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
        for event in events[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
            logger.info(f"  - {event['event_type']}: {event['data']}")
        
        # –û—á–∏—Å—Ç–∫–∞
        async with db.acquire() as conn:
            await conn.execute("DELETE FROM events WHERE user_id = 77777")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Event Sourcing: {e}")
        return False
    finally:
        await event_store.shutdown()


async def test_actor_coordination():
    """–¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∞–∫—Ç–æ—Ä–æ–≤"""
    logger.info("\n=== –¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∞–∫—Ç–æ—Ä–æ–≤ ===")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        event_store = EventStore(db)
        await event_store.initialize()
        
        memory_actor = MemoryActor(db)
        await memory_actor.initialize()
        
        user_session_actor = UserSessionActor(memory_actor, event_store)
        await user_session_actor.initialize()
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info("üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        response = await user_session_actor.handle_user_message(
            "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∞–∫—Ç–æ—Ä–æ–≤!",
            user_id=77777
        )
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        health = await user_session_actor.health_check()
        metrics = health.get("coordination_metrics", {})
        
        logger.info("üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏:")
        logger.info(f"  - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {metrics.get('total_messages', 0)}")
        logger.info(f"  - –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {metrics.get('successful_flows', 0)}")
        logger.info(f"  - Success rate: {metrics.get('success_rate', 0):.2%}")
        
        # –û—á–∏—Å—Ç–∫–∞
        async with db.acquire() as conn:
            await conn.execute("DELETE FROM events WHERE user_id = 77777")
            await conn.execute("DELETE FROM stm_buffer WHERE user_id = 77777")
        
        # Shutdown
        await user_session_actor.shutdown()
        await memory_actor.shutdown()
        await event_store.shutdown()
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏: {e}")
        return False


async def test_configuration():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    logger.info("\n=== –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º EVENT_CONFIG
    logger.info("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ EVENT_CONFIG:")
    assert "max_event_size_bytes" in EVENT_CONFIG
    assert "event_types" in EVENT_CONFIG
    logger.info(f"  ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–±—ã—Ç–∏—è: {EVENT_CONFIG['max_event_size_bytes']} –±–∞–π—Ç")
    logger.info(f"  ‚úÖ –¢–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π: {len(EVENT_CONFIG['event_types'])}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º COORDINATION_CONFIG
    logger.info("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ COORDINATION_CONFIG:")
    assert "actor_timeout_seconds" in COORDINATION_CONFIG
    assert "coordination_patterns" in COORDINATION_CONFIG
    logger.info(f"  ‚úÖ Timeout –∞–∫—Ç–æ—Ä–æ–≤: {COORDINATION_CONFIG['actor_timeout_seconds']} —Å–µ–∫")
    logger.info(f"  ‚úÖ Retry –ø–æ–ø—ã—Ç–æ–∫: {COORDINATION_CONFIG['coordination_retry_attempts']}")
    
    return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üê≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ 3.3: Event Sourcing + –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∞–∫—Ç–æ—Ä–æ–≤")
    
    results = []
    
    try:
        # 1. –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        results.append(("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", await test_configuration()))
        
        # 2. –¢–µ—Å—Ç Event Sourcing
        results.append(("Event Sourcing", await test_event_sourcing()))
        
        # 3. –¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
        results.append(("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∞–∫—Ç–æ—Ä–æ–≤", await test_actor_coordination()))
        
        # –ò—Ç–æ–≥–∏
        logger.info("\n=== –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
        all_passed = True
        for test_name, passed in results:
            status = "‚úÖ PASS" if passed else "‚ùå FAIL"
            logger.info(f"{test_name}: {status}")
            if not passed:
                all_passed = False
        
        if all_passed:
            logger.info("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –≠—Ç–∞–ø 3.3 –∑–∞–≤–µ—Ä—à–µ–Ω.")
        else:
            logger.info("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await db.close()


if __name__ == "__main__":
    asyncio.run(main())